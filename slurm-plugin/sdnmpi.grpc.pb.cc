// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sdnmpi.proto

#include "sdnmpi.pb.h"
#include "sdnmpi.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SDNMPI_method_names[] = {
  "/SDNMPI/ListJob",
  "/SDNMPI/GetJob",
  "/SDNMPI/CreateJob",
  "/SDNMPI/StartJob",
  "/SDNMPI/FinishJob",
  "/SDNMPI/ListProcess",
  "/SDNMPI/GetProcess",
  "/SDNMPI/CreateProcess",
  "/SDNMPI/StartProcess",
  "/SDNMPI/FinishProcess",
};

std::unique_ptr< SDNMPI::Stub> SDNMPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SDNMPI::Stub> stub(new SDNMPI::Stub(channel));
  return stub;
}

SDNMPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListJob_(SDNMPI_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJob_(SDNMPI_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateJob_(SDNMPI_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartJob_(SDNMPI_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FinishJob_(SDNMPI_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProcess_(SDNMPI_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProcess_(SDNMPI_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateProcess_(SDNMPI_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartProcess_(SDNMPI_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FinishProcess_(SDNMPI_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SDNMPI::Stub::ListJob(::grpc::ClientContext* context, const ::Empty& request, ::ListJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListJob_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ListJobResponse>* SDNMPI::Stub::AsyncListJobRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ListJobResponse>::Create(channel_.get(), cq, rpcmethod_ListJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ListJobResponse>* SDNMPI::Stub::PrepareAsyncListJobRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ListJobResponse>::Create(channel_.get(), cq, rpcmethod_ListJob_, context, request, false);
}

::grpc::Status SDNMPI::Stub::GetJob(::grpc::ClientContext* context, const ::GetJobRequest& request, ::GetJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetJob_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::GetJobResponse>* SDNMPI::Stub::AsyncGetJobRaw(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetJobResponse>::Create(channel_.get(), cq, rpcmethod_GetJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetJobResponse>* SDNMPI::Stub::PrepareAsyncGetJobRaw(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetJobResponse>::Create(channel_.get(), cq, rpcmethod_GetJob_, context, request, false);
}

::grpc::Status SDNMPI::Stub::CreateJob(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateJob_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::AsyncCreateJobRaw(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_CreateJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::PrepareAsyncCreateJobRaw(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_CreateJob_, context, request, false);
}

::grpc::Status SDNMPI::Stub::StartJob(::grpc::ClientContext* context, const ::StartJobRequest& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartJob_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::AsyncStartJobRaw(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_StartJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::PrepareAsyncStartJobRaw(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_StartJob_, context, request, false);
}

::grpc::Status SDNMPI::Stub::FinishJob(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FinishJob_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::AsyncFinishJobRaw(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_FinishJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::PrepareAsyncFinishJobRaw(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_FinishJob_, context, request, false);
}

::grpc::Status SDNMPI::Stub::ListProcess(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::ListProcessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListProcess_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ListProcessResponse>* SDNMPI::Stub::AsyncListProcessRaw(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ListProcessResponse>::Create(channel_.get(), cq, rpcmethod_ListProcess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::ListProcessResponse>* SDNMPI::Stub::PrepareAsyncListProcessRaw(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::ListProcessResponse>::Create(channel_.get(), cq, rpcmethod_ListProcess_, context, request, false);
}

::grpc::Status SDNMPI::Stub::GetProcess(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::GetProcessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProcess_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::GetProcessResponse>* SDNMPI::Stub::AsyncGetProcessRaw(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetProcessResponse>::Create(channel_.get(), cq, rpcmethod_GetProcess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GetProcessResponse>* SDNMPI::Stub::PrepareAsyncGetProcessRaw(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::GetProcessResponse>::Create(channel_.get(), cq, rpcmethod_GetProcess_, context, request, false);
}

::grpc::Status SDNMPI::Stub::CreateProcess(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateProcess_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::AsyncCreateProcessRaw(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_CreateProcess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::PrepareAsyncCreateProcessRaw(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_CreateProcess_, context, request, false);
}

::grpc::Status SDNMPI::Stub::StartProcess(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartProcess_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::AsyncStartProcessRaw(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_StartProcess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::PrepareAsyncStartProcessRaw(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_StartProcess_, context, request, false);
}

::grpc::Status SDNMPI::Stub::FinishProcess(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FinishProcess_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::AsyncFinishProcessRaw(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_FinishProcess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* SDNMPI::Stub::PrepareAsyncFinishProcessRaw(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_FinishProcess_, context, request, false);
}

SDNMPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::Empty, ::ListJobResponse>(
          std::mem_fn(&SDNMPI::Service::ListJob), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::GetJobRequest, ::GetJobResponse>(
          std::mem_fn(&SDNMPI::Service::GetJob), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::CreateJobRequest, ::Empty>(
          std::mem_fn(&SDNMPI::Service::CreateJob), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::StartJobRequest, ::Empty>(
          std::mem_fn(&SDNMPI::Service::StartJob), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::FinishJobRequest, ::Empty>(
          std::mem_fn(&SDNMPI::Service::FinishJob), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::ListProcessRequest, ::ListProcessResponse>(
          std::mem_fn(&SDNMPI::Service::ListProcess), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::GetProcessRequest, ::GetProcessResponse>(
          std::mem_fn(&SDNMPI::Service::GetProcess), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::CreateProcessRequest, ::Empty>(
          std::mem_fn(&SDNMPI::Service::CreateProcess), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::StartProcessRequest, ::Empty>(
          std::mem_fn(&SDNMPI::Service::StartProcess), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDNMPI_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDNMPI::Service, ::FinishProcessRequest, ::Empty>(
          std::mem_fn(&SDNMPI::Service::FinishProcess), this)));
}

SDNMPI::Service::~Service() {
}

::grpc::Status SDNMPI::Service::ListJob(::grpc::ServerContext* context, const ::Empty* request, ::ListJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDNMPI::Service::GetJob(::grpc::ServerContext* context, const ::GetJobRequest* request, ::GetJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDNMPI::Service::CreateJob(::grpc::ServerContext* context, const ::CreateJobRequest* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDNMPI::Service::StartJob(::grpc::ServerContext* context, const ::StartJobRequest* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDNMPI::Service::FinishJob(::grpc::ServerContext* context, const ::FinishJobRequest* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDNMPI::Service::ListProcess(::grpc::ServerContext* context, const ::ListProcessRequest* request, ::ListProcessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDNMPI::Service::GetProcess(::grpc::ServerContext* context, const ::GetProcessRequest* request, ::GetProcessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDNMPI::Service::CreateProcess(::grpc::ServerContext* context, const ::CreateProcessRequest* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDNMPI::Service::StartProcess(::grpc::ServerContext* context, const ::StartProcessRequest* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDNMPI::Service::FinishProcess(::grpc::ServerContext* context, const ::FinishProcessRequest* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


