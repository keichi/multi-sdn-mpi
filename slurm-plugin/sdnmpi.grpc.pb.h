// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sdnmpi.proto
#ifndef GRPC_sdnmpi_2eproto__INCLUDED
#define GRPC_sdnmpi_2eproto__INCLUDED

#include "sdnmpi.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class SDNMPI final {
 public:
  static constexpr char const* service_full_name() {
    return "SDNMPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListJob(::grpc::ClientContext* context, const ::Empty& request, ::ListJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListJobResponse>> AsyncListJob(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListJobResponse>>(AsyncListJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListJobResponse>> PrepareAsyncListJob(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListJobResponse>>(PrepareAsyncListJobRaw(context, request, cq));
    }
    virtual ::grpc::Status GetJob(::grpc::ClientContext* context, const ::GetJobRequest& request, ::GetJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetJobResponse>> AsyncGetJob(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetJobResponse>>(AsyncGetJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetJobResponse>> PrepareAsyncGetJob(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetJobResponse>>(PrepareAsyncGetJobRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateJob(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncCreateJob(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncCreateJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncCreateJob(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncCreateJobRaw(context, request, cq));
    }
    virtual ::grpc::Status StartJob(::grpc::ClientContext* context, const ::StartJobRequest& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncStartJob(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncStartJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncStartJob(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncStartJobRaw(context, request, cq));
    }
    virtual ::grpc::Status FinishJob(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncFinishJob(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncFinishJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncFinishJob(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncFinishJobRaw(context, request, cq));
    }
    virtual ::grpc::Status ListProcess(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::ListProcessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListProcessResponse>> AsyncListProcess(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListProcessResponse>>(AsyncListProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListProcessResponse>> PrepareAsyncListProcess(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ListProcessResponse>>(PrepareAsyncListProcessRaw(context, request, cq));
    }
    virtual ::grpc::Status GetProcess(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::GetProcessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetProcessResponse>> AsyncGetProcess(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetProcessResponse>>(AsyncGetProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetProcessResponse>> PrepareAsyncGetProcess(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetProcessResponse>>(PrepareAsyncGetProcessRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateProcess(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncCreateProcess(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncCreateProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncCreateProcess(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncCreateProcessRaw(context, request, cq));
    }
    virtual ::grpc::Status StartProcess(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncStartProcess(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncStartProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncStartProcess(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncStartProcessRaw(context, request, cq));
    }
    virtual ::grpc::Status FinishProcess(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncFinishProcess(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncFinishProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncFinishProcess(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncFinishProcessRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListJobResponse>* AsyncListJobRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListJobResponse>* PrepareAsyncListJobRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetJobResponse>* AsyncGetJobRaw(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetJobResponse>* PrepareAsyncGetJobRaw(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncCreateJobRaw(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncCreateJobRaw(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncStartJobRaw(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncStartJobRaw(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncFinishJobRaw(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncFinishJobRaw(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListProcessResponse>* AsyncListProcessRaw(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ListProcessResponse>* PrepareAsyncListProcessRaw(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetProcessResponse>* AsyncGetProcessRaw(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetProcessResponse>* PrepareAsyncGetProcessRaw(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncCreateProcessRaw(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncCreateProcessRaw(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncStartProcessRaw(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncStartProcessRaw(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncFinishProcessRaw(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncFinishProcessRaw(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListJob(::grpc::ClientContext* context, const ::Empty& request, ::ListJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListJobResponse>> AsyncListJob(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListJobResponse>>(AsyncListJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListJobResponse>> PrepareAsyncListJob(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListJobResponse>>(PrepareAsyncListJobRaw(context, request, cq));
    }
    ::grpc::Status GetJob(::grpc::ClientContext* context, const ::GetJobRequest& request, ::GetJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetJobResponse>> AsyncGetJob(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetJobResponse>>(AsyncGetJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetJobResponse>> PrepareAsyncGetJob(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetJobResponse>>(PrepareAsyncGetJobRaw(context, request, cq));
    }
    ::grpc::Status CreateJob(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncCreateJob(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncCreateJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncCreateJob(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncCreateJobRaw(context, request, cq));
    }
    ::grpc::Status StartJob(::grpc::ClientContext* context, const ::StartJobRequest& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncStartJob(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncStartJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncStartJob(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncStartJobRaw(context, request, cq));
    }
    ::grpc::Status FinishJob(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncFinishJob(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncFinishJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncFinishJob(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncFinishJobRaw(context, request, cq));
    }
    ::grpc::Status ListProcess(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::ListProcessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListProcessResponse>> AsyncListProcess(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListProcessResponse>>(AsyncListProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListProcessResponse>> PrepareAsyncListProcess(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ListProcessResponse>>(PrepareAsyncListProcessRaw(context, request, cq));
    }
    ::grpc::Status GetProcess(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::GetProcessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetProcessResponse>> AsyncGetProcess(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetProcessResponse>>(AsyncGetProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetProcessResponse>> PrepareAsyncGetProcess(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetProcessResponse>>(PrepareAsyncGetProcessRaw(context, request, cq));
    }
    ::grpc::Status CreateProcess(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncCreateProcess(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncCreateProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncCreateProcess(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncCreateProcessRaw(context, request, cq));
    }
    ::grpc::Status StartProcess(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncStartProcess(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncStartProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncStartProcess(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncStartProcessRaw(context, request, cq));
    }
    ::grpc::Status FinishProcess(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncFinishProcess(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncFinishProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncFinishProcess(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncFinishProcessRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::ListJobResponse>* AsyncListJobRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListJobResponse>* PrepareAsyncListJobRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetJobResponse>* AsyncGetJobRaw(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetJobResponse>* PrepareAsyncGetJobRaw(::grpc::ClientContext* context, const ::GetJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncCreateJobRaw(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncCreateJobRaw(::grpc::ClientContext* context, const ::CreateJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncStartJobRaw(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncStartJobRaw(::grpc::ClientContext* context, const ::StartJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncFinishJobRaw(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncFinishJobRaw(::grpc::ClientContext* context, const ::FinishJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListProcessResponse>* AsyncListProcessRaw(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ListProcessResponse>* PrepareAsyncListProcessRaw(::grpc::ClientContext* context, const ::ListProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetProcessResponse>* AsyncGetProcessRaw(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetProcessResponse>* PrepareAsyncGetProcessRaw(::grpc::ClientContext* context, const ::GetProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncCreateProcessRaw(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncCreateProcessRaw(::grpc::ClientContext* context, const ::CreateProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncStartProcessRaw(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncStartProcessRaw(::grpc::ClientContext* context, const ::StartProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncFinishProcessRaw(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncFinishProcessRaw(::grpc::ClientContext* context, const ::FinishProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListJob_;
    const ::grpc::internal::RpcMethod rpcmethod_GetJob_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateJob_;
    const ::grpc::internal::RpcMethod rpcmethod_StartJob_;
    const ::grpc::internal::RpcMethod rpcmethod_FinishJob_;
    const ::grpc::internal::RpcMethod rpcmethod_ListProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_StartProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_FinishProcess_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListJob(::grpc::ServerContext* context, const ::Empty* request, ::ListJobResponse* response);
    virtual ::grpc::Status GetJob(::grpc::ServerContext* context, const ::GetJobRequest* request, ::GetJobResponse* response);
    virtual ::grpc::Status CreateJob(::grpc::ServerContext* context, const ::CreateJobRequest* request, ::Empty* response);
    virtual ::grpc::Status StartJob(::grpc::ServerContext* context, const ::StartJobRequest* request, ::Empty* response);
    virtual ::grpc::Status FinishJob(::grpc::ServerContext* context, const ::FinishJobRequest* request, ::Empty* response);
    virtual ::grpc::Status ListProcess(::grpc::ServerContext* context, const ::ListProcessRequest* request, ::ListProcessResponse* response);
    virtual ::grpc::Status GetProcess(::grpc::ServerContext* context, const ::GetProcessRequest* request, ::GetProcessResponse* response);
    virtual ::grpc::Status CreateProcess(::grpc::ServerContext* context, const ::CreateProcessRequest* request, ::Empty* response);
    virtual ::grpc::Status StartProcess(::grpc::ServerContext* context, const ::StartProcessRequest* request, ::Empty* response);
    virtual ::grpc::Status FinishProcess(::grpc::ServerContext* context, const ::FinishProcessRequest* request, ::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListJob() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListJob(::grpc::ServerContext* context, const ::Empty* request, ::ListJobResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListJob(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::ListJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetJob() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* context, const ::GetJobRequest* request, ::GetJobResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJob(::grpc::ServerContext* context, ::GetJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateJob() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateJob(::grpc::ServerContext* context, const ::CreateJobRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateJob(::grpc::ServerContext* context, ::CreateJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartJob() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StartJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartJob(::grpc::ServerContext* context, const ::StartJobRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartJob(::grpc::ServerContext* context, ::StartJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FinishJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FinishJob() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_FinishJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishJob(::grpc::ServerContext* context, const ::FinishJobRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishJob(::grpc::ServerContext* context, ::FinishJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListProcess() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProcess(::grpc::ServerContext* context, const ::ListProcessRequest* request, ::ListProcessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProcess(::grpc::ServerContext* context, ::ListProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::ListProcessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetProcess() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcess(::grpc::ServerContext* context, const ::GetProcessRequest* request, ::GetProcessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProcess(::grpc::ServerContext* context, ::GetProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::GetProcessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateProcess() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProcess(::grpc::ServerContext* context, const ::CreateProcessRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProcess(::grpc::ServerContext* context, ::CreateProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartProcess() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StartProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcess(::grpc::ServerContext* context, const ::StartProcessRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartProcess(::grpc::ServerContext* context, ::StartProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FinishProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FinishProcess() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_FinishProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishProcess(::grpc::ServerContext* context, const ::FinishProcessRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishProcess(::grpc::ServerContext* context, ::FinishProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListJob<WithAsyncMethod_GetJob<WithAsyncMethod_CreateJob<WithAsyncMethod_StartJob<WithAsyncMethod_FinishJob<WithAsyncMethod_ListProcess<WithAsyncMethod_GetProcess<WithAsyncMethod_CreateProcess<WithAsyncMethod_StartProcess<WithAsyncMethod_FinishProcess<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListJob() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListJob(::grpc::ServerContext* context, const ::Empty* request, ::ListJobResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetJob() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* context, const ::GetJobRequest* request, ::GetJobResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateJob() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateJob(::grpc::ServerContext* context, const ::CreateJobRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartJob() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StartJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartJob(::grpc::ServerContext* context, const ::StartJobRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FinishJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FinishJob() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_FinishJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishJob(::grpc::ServerContext* context, const ::FinishJobRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListProcess() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProcess(::grpc::ServerContext* context, const ::ListProcessRequest* request, ::ListProcessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetProcess() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcess(::grpc::ServerContext* context, const ::GetProcessRequest* request, ::GetProcessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateProcess() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProcess(::grpc::ServerContext* context, const ::CreateProcessRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartProcess() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StartProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartProcess(::grpc::ServerContext* context, const ::StartProcessRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FinishProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FinishProcess() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_FinishProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishProcess(::grpc::ServerContext* context, const ::FinishProcessRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListJob() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Empty, ::ListJobResponse>(std::bind(&WithStreamedUnaryMethod_ListJob<BaseClass>::StreamedListJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListJob(::grpc::ServerContext* context, const ::Empty* request, ::ListJobResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::ListJobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetJob() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::GetJobRequest, ::GetJobResponse>(std::bind(&WithStreamedUnaryMethod_GetJob<BaseClass>::StreamedGetJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetJob(::grpc::ServerContext* context, const ::GetJobRequest* request, ::GetJobResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetJobRequest,::GetJobResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateJob() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::CreateJobRequest, ::Empty>(std::bind(&WithStreamedUnaryMethod_CreateJob<BaseClass>::StreamedCreateJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateJob(::grpc::ServerContext* context, const ::CreateJobRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateJobRequest,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartJob() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::StartJobRequest, ::Empty>(std::bind(&WithStreamedUnaryMethod_StartJob<BaseClass>::StreamedStartJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartJob(::grpc::ServerContext* context, const ::StartJobRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StartJobRequest,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FinishJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FinishJob() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::FinishJobRequest, ::Empty>(std::bind(&WithStreamedUnaryMethod_FinishJob<BaseClass>::StreamedFinishJob, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FinishJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FinishJob(::grpc::ServerContext* context, const ::FinishJobRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinishJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FinishJobRequest,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListProcess() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::ListProcessRequest, ::ListProcessResponse>(std::bind(&WithStreamedUnaryMethod_ListProcess<BaseClass>::StreamedListProcess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListProcess(::grpc::ServerContext* context, const ::ListProcessRequest* request, ::ListProcessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ListProcessRequest,::ListProcessResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetProcess() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::GetProcessRequest, ::GetProcessResponse>(std::bind(&WithStreamedUnaryMethod_GetProcess<BaseClass>::StreamedGetProcess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProcess(::grpc::ServerContext* context, const ::GetProcessRequest* request, ::GetProcessResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetProcessRequest,::GetProcessResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateProcess() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::CreateProcessRequest, ::Empty>(std::bind(&WithStreamedUnaryMethod_CreateProcess<BaseClass>::StreamedCreateProcess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProcess(::grpc::ServerContext* context, const ::CreateProcessRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreateProcessRequest,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartProcess() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::StartProcessRequest, ::Empty>(std::bind(&WithStreamedUnaryMethod_StartProcess<BaseClass>::StreamedStartProcess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartProcess(::grpc::ServerContext* context, const ::StartProcessRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::StartProcessRequest,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FinishProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FinishProcess() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::FinishProcessRequest, ::Empty>(std::bind(&WithStreamedUnaryMethod_FinishProcess<BaseClass>::StreamedFinishProcess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FinishProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FinishProcess(::grpc::ServerContext* context, const ::FinishProcessRequest* request, ::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinishProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FinishProcessRequest,::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListJob<WithStreamedUnaryMethod_GetJob<WithStreamedUnaryMethod_CreateJob<WithStreamedUnaryMethod_StartJob<WithStreamedUnaryMethod_FinishJob<WithStreamedUnaryMethod_ListProcess<WithStreamedUnaryMethod_GetProcess<WithStreamedUnaryMethod_CreateProcess<WithStreamedUnaryMethod_StartProcess<WithStreamedUnaryMethod_FinishProcess<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListJob<WithStreamedUnaryMethod_GetJob<WithStreamedUnaryMethod_CreateJob<WithStreamedUnaryMethod_StartJob<WithStreamedUnaryMethod_FinishJob<WithStreamedUnaryMethod_ListProcess<WithStreamedUnaryMethod_GetProcess<WithStreamedUnaryMethod_CreateProcess<WithStreamedUnaryMethod_StartProcess<WithStreamedUnaryMethod_FinishProcess<Service > > > > > > > > > > StreamedService;
};


#endif  // GRPC_sdnmpi_2eproto__INCLUDED
